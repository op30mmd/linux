name: Build Fedora 42 Kernel from Fork (With Firmware)

on:
  workflow_dispatch:
    inputs:
      fork_owner:
        description: 'Your GitHub username or organization that owns the fork'
        required: true
        default: 'op30mmd' # The default upstream kernel repository owner
      branch_name:
        description: 'The branch to build from your fork'
        required: true
        default: 'master' # The default upstream kernel branch

jobs:
  build:
    runs-on: ubuntu-latest
    container: fedora:42
    steps:

      - name: Install Build Dependencies
        run: |
          # Install all necessary tools for kernel compilation and packaging.
          dnf install -y git make gcc bison flex elfutils-devel openssl-devel rpm-build cpio hostname \
                         dwarves openssl perl rsync bc wget tar

      - name: Download AMDGPU firmware
        run: |
          git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git /tmp/linux-firmware
          mkdir -p /lib/firmware/amdgpu
          cp -r /tmp/linux-firmware/amdgpu/* /lib/firmware/amdgpu/
          ls -l /lib/firmware/amdgpu

      - name: Clone kernel source from your fork
        run: |
          git clone --depth=1 https://github.com/${{ github.event.inputs.fork_owner }}/linux.git
          cd linux
          git checkout ${{ github.event.inputs.branch_name }}
          echo "Successfully cloned and checked out ${{ github.event.inputs.branch_name }} from ${{ github.event.inputs.fork_owner }}/linux"

      - name: Configure Kernel for Boot
        run: |
          cd linux
          # Download the full Fedora config for x86_64
          curl -L -o .config https://src.fedoraproject.org/rpms/kernel/raw/rawhide/f/kernel-x86_64-fedora.config
          echo "Downloaded Fedora kernel config."

          # Generate a space-separated list of all AMDGPU firmware files
          FIRMWARE_LIST=$(cd /lib/firmware && find amdgpu -type f -name '*.bin' | tr '\n' ' ')

          # Patch the config for AMDGPU SI, disable radeon, and include all firmware
          echo "# AMDGPU SI and DPM" >> .config
          echo "CONFIG_DRM_AMDGPU=m" >> .config
          echo "CONFIG_DRM_AMDGPU_SI=y" >> .config
          echo "CONFIG_DRM_AMDGPU_CIK=y" >> .config
          echo "CONFIG_DRM_AMDGPU_USERPTR=y" >> .config
          echo "CONFIG_DRM_RADEON=n" >> .config
          echo "CONFIG_DRM_RADEON_SI_SUPPORT=n" >> .config
          echo "CONFIG_DRM_RADEON_CIK_SUPPORT=n" >> .config
          echo "CONFIG_DRM_AMDGPU_WERROR=n" >> .config
          echo "CONFIG_PM=y" >> .config
          echo "CONFIG_PM_RUNTIME=y" >> .config
          echo "CONFIG_HWMON=y" >> .config
          echo "# Include all AMDGPU firmware" >> .config
          echo "CONFIG_EXTRA_FIRMWARE=\"$FIRMWARE_LIST\"" >> .config

          # Apply config changes
          make olddefconfig
          echo "Kernel configuration updated and dependencies automatically resolved."

          # Blacklist radeon and set kernel parameters for SI DPM
          echo 'blacklist radeon' | tee /etc/modprobe.d/blacklist-radeon.conf
          echo 'options amdgpu si_support=1 cik_support=1' | tee /etc/modprobe.d/amdgpu.conf
          echo 'options radeon si_support=0 cik_support=0' | tee /etc/modprobe.d/radeon.conf

          # Add kernel command line for GitHub Actions test VMs (if needed)
          if [ -f /etc/default/grub ]; then
            sed -i 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="amdgpu.si_support=1 radeon.si_support=0 modprobe.blacklist=radeon /' /etc/default/grub
          fi


      - name: Build kernel RPM packages
        run: |
          cd linux
          set -x
          make -j$(nproc) binrpm-pkg 2>&1 | tee build.log
          exit_code=${PIPESTATUS[0]}
          if [ $exit_code -ne 0 ]; then
            echo "Build failed, printing all error lines from build.log:"
            grep -i 'error:' build.log || true
            exit $exit_code
          fi

      - name: Upload build log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: linux/build.log

      - name: Upload kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fedora-42-kernel-rpms-from-fork
          path: linux/rpmbuild/RPMS/x86_64/
