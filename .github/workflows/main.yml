name: Build Fedora 42 Kernel from Fork (With Firmware)

on:
  workflow_dispatch:
    inputs:
      fork_owner:
        description: 'Your GitHub username or organization that owns the fork'
        required: true
        default: 'op30mmd' # The default upstream kernel repository owner
      branch_name:
        description: 'The branch to build from your fork'
        required: true
        default: 'master' # The default upstream kernel branch

jobs:
  build:
    runs-on: ubuntu-latest
    container: fedora:42
    steps:

      - name: Install Build Dependencies
        run: |
          # Install all necessary tools for kernel compilation and packaging.
          dnf install -y git make gcc bison flex elfutils-devel openssl-devel rpm-build cpio hostname \
                         dwarves openssl perl rsync bc wget tar

      - name: Download AMDGPU firmware
        run: |
          mkdir -p /lib/firmware/amdgpu
          cd /lib/firmware/amdgpu
          # Download the latest AMDGPU firmware tarball from kernel.org
          wget -qO- https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/snapshot/linux-firmware-20250721.tar.gz | tar xz --strip-components=2 linux-firmware-20250721/amdgpu
          ls -l /lib/firmware/amdgpu

      - name: Clone kernel source from your fork
        run: |
          git clone https://github.com/${{ github.event.inputs.fork_owner }}/linux.git
          cd linux
          git checkout ${{ github.event.inputs.branch_name }}
          echo "Successfully cloned and checked out ${{ github.event.inputs.branch_name }} from ${{ github.event.inputs.fork_owner }}/linux"

      - name: Configure Kernel for Boot
        run: |
          cd linux
          # Start with a standard, default configuration
          make defconfig
          echo "Created default kernel configuration."

          # Append our desired options directly to the .config file.
          cat <<EOF >> .config
          # Essential Filesystems
          CONFIG_EXT4_FS=y
          CONFIG_BTRFS_FS=y
          CONFIG_XFS_FS=y

          # Essential VirtIO drivers for VMs
          CONFIG_VIRTIO_PCI=y
          CONFIG_VIRTIO_BLK=y
          CONFIG_VIRTIO_NET=y
          CONFIG_VIRTIO_CONSOLE=y
          CONFIG_VIRTIO_GPU=y
          CONFIG_DRM_VIRTIO_GPU=y

          # AMDGPU Driver (as a module)
          CONFIG_DRM_AMDGPU=m
          CONFIG_DRM_AMDGPU_SI=y
          CONFIG_DRM_RADEON_SI_SUPPORT=n

          # --- NEW: Include Firmware ---
          # This is critical. It tells the build process to include all firmware files
          # found in /lib/firmware into the kernel's initramfs. This allows the amdgpu
          # driver to load the necessary firmware for power management.
          CONFIG_EXTRA_FIRMWARE="amdgpu"
          CONFIG_EXTRA_FIRMWARE_DIR="/lib/firmware"
          EOF

          # 'make olddefconfig' reads the .config file and automatically enables
          # all necessary prerequisite options to ensure the configuration is consistent.
          make olddefconfig
          echo "Kernel configuration updated and dependencies automatically resolved."


      - name: Build kernel RPM packages
        run: |
          cd linux
          set -x
          make -j$(nproc) binrpm-pkg 2>&1 | tee build.log
          exit_code=${PIPESTATUS[0]}
          if [ $exit_code -ne 0 ]; then
            echo "Build failed, printing all error lines from build.log:"
            grep -i 'error:' build.log || true
            exit $exit_code
          fi

      - name: Upload build log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: linux/build.log

      - name: Upload kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fedora-42-kernel-rpms-from-fork
          path: linux/rpmbuild/RPMS/x86_64/
