name: Build Fedora 42 Kernel from Fork (With Firmware)

on:
  workflow_dispatch:
    inputs:
      fork_owner:
        description: 'Your GitHub username or organization that owns the fork'
        required: true
        default: 'op30mmd' # The default upstream kernel repository owner
      branch_name:
        description: 'The branch to build from your fork'
        required: true
        default: 'master' # The default upstream kernel branch

jobs:
  build:
    runs-on: ubuntu-latest
    container: fedora:42
    steps:

      - name: Install Build Dependencies
        run: |
          # Install all necessary tools for kernel compilation and packaging.
          dnf install -y git make gcc bison flex elfutils-devel openssl-devel rpm-build cpio hostname \
                         dwarves openssl perl rsync bc wget tar

      - name: Download AMDGPU firmware
        run: |
          git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git /tmp/linux-firmware
          mkdir -p /lib/firmware/amdgpu
          cp -r /tmp/linux-firmware/amdgpu/* /lib/firmware/amdgpu/
          ls -l /lib/firmware/amdgpu

      - name: Clone kernel source from your fork
        run: |
          git clone --depth=1 https://github.com/${{ github.event.inputs.fork_owner }}/linux.git
          cd linux
          git checkout ${{ github.event.inputs.branch_name }}
          
          # Create patch to fix SI DPM clock speed issues
          cat << 'EOF' > si_dpm_fix.patch
          diff --git a/drivers/gpu/drm/amd/pm/legacy-dpm/si_dpm.c b/drivers/gpu/drm/amd/pm/legacy-dpm/si_dpm.c
          index xxxxxxx..xxxxxxx 100644
          --- a/drivers/gpu/drm/amd/pm/legacy-dpm/si_dpm.c
          +++ b/drivers/gpu/drm/amd/pm/legacy-dpm/si_dpm.c
          @@ -67,7 +67,7 @@
          #include "smu/smu_6_0_d.h"
          #include "smu/smu_6_0_sh_mask.h"
          
          -#define SCLK_MIN_DEEPSLEEP_FREQ     1350
          +#define SCLK_MIN_DEEPSLEEP_FREQ     0
          
          #define MC_CG_ARB_FREQ_F0           0x0a
          #define MC_CG_ARB_FREQ_F1           0x0b
          @@ -5668,11 +5668,16 @@ static int si_set_power_state_conditionally_enable_ulv(struct amdgpu_device *adev,
                                                     struct amdgpu_ps *amdgpu_new_state)
          {
              const struct si_power_info *si_pi = si_get_pi(adev);
          +    /* Don't enable ULV during high performance 3D workloads */
          +    if (amdgpu_new_state->class & (AMDGPU_PP_CLASS_PERFORMANCE |
          +                                   AMDGPU_PP_CLASS_COMPUTE))
          +        return 0;
          +
              const struct si_ulv_param *ulv = &si_pi->ulv;
          
              if (ulv->supported) {
                  if (si_is_state_ulv_compatible(adev, amdgpu_new_state))
          -            return (amdgpu_si_send_msg_to_smc(adev, PPSMC_MSG_EnableULV) == PPSMC_Result_OK) ?
          +            return ((adev->pm.no_display ||
          +                    amdgpu_si_send_msg_to_smc(adev, PPSMC_MSG_EnableULV) == PPSMC_Result_OK)) ?
                              0 : -EINVAL;
              }
              return 0;
          EOF
          
          # Apply the patch
          patch -p1 < si_dpm_fix.patch || {
            echo "Failed to apply patch. This might be because the changes are already present."
            exit 1
          }
          
          echo "Successfully cloned and patched kernel source"

      - name: Configure Kernel for Boot
        run: |
          cd linux
          # Download the full Fedora config for x86_64
          curl -L -o .config https://src.fedoraproject.org/rpms/kernel/raw/rawhide/f/kernel-x86_64-fedora.config
          echo "Downloaded Fedora kernel config."

          # Configure AMDGPU SI with optimized settings
          cat << 'EOF' >> .config
          # AMD GPU Configuration
          CONFIG_DRM_AMDGPU=y
          CONFIG_DRM_AMDGPU_SI=y
          CONFIG_DRM_AMDGPU_CIK=y
          CONFIG_DRM_AMDGPU_USERPTR=y
          CONFIG_DRM_AMDGPU_DC=y
          CONFIG_DRM_AMDGPU_SDMA_TRAP=y
          CONFIG_DRM_AMD_DC_SI=y
          # Disable radeon driver
          CONFIG_DRM_RADEON=n
          CONFIG_DRM_RADEON_SI_SUPPORT=n
          CONFIG_DRM_RADEON_CIK_SUPPORT=n
          # Performance optimizations
          CONFIG_DRM_AMDGPU_WERROR=n
          CONFIG_PM=y
          CONFIG_PM_RUNTIME=y
          CONFIG_HWMON=y
          CONFIG_DRM_AMD_DC_FBC=y
          CONFIG_PERF_EVENTS_AMD_POWER=y
          EOF
          echo "# Include all AMDGPU firmware" >> .config
          echo "CONFIG_EXTRA_FIRMWARE_DIR=/lib/firmware" >> .config
          echo "CONFIG_EXTRA_FIRMWARE=\"\$(shell find /lib/firmware/amdgpu -type f -name '*.bin' | sed 's,/lib/firmware/,,')\"" >> .config

          # Apply config changes
          make olddefconfig
          echo "Kernel configuration updated and dependencies automatically resolved."

          # Set kernel parameters for SI DPM
          echo 'options amdgpu si_support=1 cik_support=1' | tee /etc/modprobe.d/amdgpu.conf
          echo 'options radeon si_support=0 cik_support=0' | tee /etc/modprobe.d/radeon.conf



      - name: Build kernel RPM packages
        run: |
          cd linux
          set -x
          make -j$(nproc) binrpm-pkg 2>&1 | tee build.log
          exit_code=${PIPESTATUS[0]}
          if [ $exit_code -ne 0 ]; then
            echo "Build failed, printing all error lines from build.log:"
            grep -i 'error:' build.log || true
            exit $exit_code
          fi

      - name: Upload build log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: linux/build.log

      - name: Upload kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fedora-42-kernel-rpms-from-fork
          path: linux/rpmbuild/RPMS/x86_64/
